generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ================================
// 1. 인증 & 사용자 도메인
// ================================

model User {
  id              Int        @id @default(autoincrement())
  email           String?    @unique @db.VarChar(255)
  passwordHash    String?    @map("password_hash") @db.VarChar(255)
  phoneNumber     String     @unique @map("phone_number") @db.VarChar(20)
  nickname        String     @db.VarChar(50)
  allowKakaoAlert Boolean    @default(false) @map("allow_kakao_alert")
  status          UserStatus @default(active)
  fcmToken        String?    @map("fcm_token") @db.VarChar(255)
  qrCode          String?    @map("qr_code") @db.Text
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  inactivedAt     DateTime?  @map("inactived_at")

  // Relations
  roles                 UserRole[]
  kakaoAccount          KakaoAccount?
  userPreferences       UserPreference?
  verificationCodes     VerificationCode[]
  userAgreements        UserAgreement?
  challengeParticipants ChallengeParticipant[]
  badges                Badge[]
  stampBooks            StampBook[]
  pointTransactions     PointTransaction[]
  reviews               Review[]
  notifications         Notification[]
  coupons               UserCoupon[]
  bookmarks             UserBookmark[]
  cafes                 Cafe[]

  @@map("users")
}

model UserRole {
  id     Int      @id @default(autoincrement())
  user   User     @relation(fields: [userId], references: [id],  onDelete: Cascade)
  userId Int
  role   RoleType

  @@unique([userId, role])
  @@map("user_role")
}

model KakaoAccount {
  id        BigInt   @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  socialId  String   @unique @map("social_id") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kakao_accounts")
}

model UserPreference {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique @map("user_id")
  preferredArea     String?
  preferredStore   Json?    @map("preferred_store")
  preferredTakeout Json?    @map("preferred_tkeout")
  preferredMenu    Json?    @map("preferred_menu")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model VerificationCode {
  id          Int      @id @default(autoincrement())
  userId      Int?     @map("user_id")
  phoneNumber String   @map("phone_number") @db.VarChar(20)
  code        String   @db.VarChar(10)
  expiresAt   DateTime @map("expires_at")
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

model UserAgreement {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique @map("user_id")
  termsAgreed         Boolean  @map("termsAgreed")
  privacyPolicyAgreed Boolean  @map("privacyPolicyAgreed")
  marketingAgreed     Boolean  @map("marketingAgreed")
  locationPermission  Boolean  @map("locationPermission")
  agreedAt            DateTime @map("agreed_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_agreements")
}

model UserBookmark {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  cafeId    Int      @map("cafe_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  cafe Cafe @relation(fields: [cafeId], references: [id], onDelete: Cascade)

  @@unique([userId, cafeId]) // 중복 북마크 방지
  @@map("user_bookmarks")
}

// ================================
// 2. 챌린지 & 스탬프 도메인
// ================================

model Challenge {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(255)
  description     String   @db.Text
  thumbnailUrl    String   @map("thumbnail_url") @db.Text
  startDate       DateTime @map("start_date") @db.Date
  endDate         DateTime @map("end_date") @db.Date
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  goalDescription String   @db.VarChar(255) // 예: "3회 공부 인증하기"
  goalCount       Int // 목표 도장 수 (ex. 3)
  rewardPoint     Int // ex. 300

  // Relations
  participants   ChallengeParticipant[]
  availableCafes ChallengeAvailableCafe[]
  badges         Badge[]

  @@map("challenges")
}

model ChallengeParticipant {
  id           Int                        @id @default(autoincrement())
  userId       Int                        @map("user_id")
  challengeId  Int                        @map("challenge_id")
  status       ChallengeParticipantStatus @default(in_progress)
  joinedAt     DateTime                   @map("joined_at")
  completedAt  DateTime?                  @map("completed_at")
  joinedCafeId Int?                       @map("joined_cafe_id") 
  createdAt    DateTime                   @default(now()) @map("created_at")
  updatedAt    DateTime                   @updatedAt @map("updated_at")

  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge  Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  joinedCafe Cafe?     @relation("CafeToJoinedChallengeParticipants", fields: [joinedCafeId], references: [id], onDelete: SetNull)

  @@unique([userId, challengeId])
  @@map("challenge_participants")
}

model ChallengeAvailableCafe {
  id          Int      @id @default(autoincrement())
  challengeId Int      @map("challenge_id")
  cafeId      Int      @map("cafe_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  cafe      Cafe      @relation(fields: [cafeId], references: [id], onDelete: Cascade)

  @@unique([challengeId, cafeId])
  @@map("challenge_available_cafes")
}

model BadgeType {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  imageUrl  String   @map("image_url") @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  badges Badge[]

  @@map("badge_types")
}

model Badge {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  challengeId Int      @map("challenge_id")
  badgeTypeId Int      @map("badge_type_id")
  earnedAt    DateTime @map("earned_at")

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  badgeType BadgeType @relation(fields: [badgeTypeId], references: [id], onDelete: Cascade)

  @@map("badges")
}

model StampBook {
  id                Int                @id @default(autoincrement())
  userId            Int                @map("user_id")
  cafeId            Int                @map("cafe_id")
  currentCount      Int                @default(0) @map("current_count")
  goalCount         Int                @default(10) @map("goal_count")
  rewardDetail      String             @map("reward_detail") @db.VarChar(255)
  startedAt         DateTime           @map("started_at")
  lastVisitedAt     DateTime?          @map("last_visited_at")
  expiresAt         DateTime           @map("expires_at")
  extendedAt        DateTime?          @map("extended_at")
  expiredAt         DateTime?          @map("expired_at")
  completedAt       DateTime?          @map("completed_at")
  convertedAt       DateTime?          @map("converted_at")
  status            StampBookStatus
  isCompleted       Boolean            @default(false) @map("is_completed")
  isConverted       Boolean            @default(false) @map("is_converted")
  round             Int                @default(1) @map("round")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  cafe              Cafe               @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  stamps            Stamp[]
  pointTransactions PointTransaction[]

  @@unique([userId, cafeId]) 
  @@map("stamp_books")
}

model Stamp {
  id            Int      @id @default(autoincrement())
  stampBookId   Int      @map("stamp_book_id")
  stampImageUrl String?  @map("stamp_image_url") @db.Text
  stampedAt     DateTime @map("stamped_at")
  source        String   @db.VarChar(100)
  method        String   @db.VarChar(20)  
  note          String?  @db.Text
  latitude      Float?
  longitude     Float?

  // Relations
  stampBook StampBook @relation(fields: [stampBookId], references: [id], onDelete: Cascade)

  @@map("stamps")
}

model StampPolicy {
  id                Int       @id @default(autoincrement())
  cafeId            Int       @unique @map("cafe_id")
  selectedImageUrl  String    @map("selected_image_url") @db.Text

  // 적립 조건
  conditionType     ConditionType        @map("condition_type") 
  minAmount         Int?                 @map("min_amount")  
  stampPerAmount    Int?                 @map("stamp_per_amount")
  drinkCount        Int?                 @map("drink_count")    
  stampPerCount     Int?                 @map("stamp_per_count")  

  // 리워드
  rewardType        RewardType   @map("reward_type") 
  discountAmount    Int?         @map("discount_amount")  
  menuId            Int?         @map("menu_id")          

  hasExpiry         Boolean   @default(false) @map("has_expiry")
  rewardExpiresAt   DateTime? @map("reward_expires_at")   

  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  cafe Cafe @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  menu     CafeMenu? @relation(fields: [menuId], references: [id], onDelete: SetNull)

  @@map("stamp_policies")
}

model StampImage {
  id        Int      @id @default(autoincrement())
  cafeId    Int      @map("cafe_id")
  imageUrl  String   @map("image_url") @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  cafe Cafe @relation(fields: [cafeId], references: [id], onDelete: Cascade)

  @@map("stamp_images")
}

model PointTransaction {
  id          Int                  @id @default(autoincrement())
  userId      Int                  @map("user_id")
  stampBookId Int?                 @map("stamp_book_id")
  point       Int
  type        PointTransactionType
  description String               @db.VarChar(255)
  createdAt   DateTime             @default(now()) @map("created_at")

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  stampBook StampBook? @relation(fields: [stampBookId], references: [id], onDelete: SetNull)

  @@map("point_transactions")
}

// ================================
// 3. 카페 & 탐색 도메인
// ================================

model Cafe {
  id               Int        @id @default(autoincrement())
  name             String     @db.VarChar(255)
  ownerId          Int        @unique @map("owner_id")
  owner            User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  address          String     @db.VarChar(500)
  region1DepthName String     @map("region_1depth_name") @db.VarChar(50)
  region2DepthName String     @map("region_2depth_name") @db.VarChar(50)
  region3DepthName String     @map("region_3depth_name") @db.VarChar(50)
  latitude         Float
  longitude        Float
  ownerName        String     @map("owner_name") @db.VarChar(100)
  businessHours    Json?      @map("business_hours")
  businessHourType  BusinessHourType? @default(DIFFERENT_EACH_DAY) @map("business_hour_type")
  breakTime        String?    @map("break_time") @db.VarChar(100)
  phone            String?    @db.VarChar(20)
  websiteUrl       String?    @map("website_url") @db.Text
  description      String?    @db.Text
  storeFilters     Json?      @map("store_filters")
  takeOutFilters   Json?      @map("take_out_filters")
  menuFilters      Json?      @map("menu_filters")
  keywords         Json?
  status           CafeStatus @default(inactive)
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")

  challengeParticipantsJoinedAt ChallengeParticipant[] @relation("CafeToJoinedChallengeParticipants")

  // Relations
  menu               CafeMenu[]
  photos             CafePhoto[]
  challengeAvailable ChallengeAvailableCafe[]
  stampBooks         StampBook[]
  reviews            Review[]
  notifications      Notification[]
  CouponTemplate     CouponTemplate[]
  bookmarkedBy       UserBookmark[]
  stampPolicies StampPolicy[]
  stampImages StampImage[]

  @@map("cafes")
}

model CafeMenu {
  id               Int      @id @default(autoincrement())
  cafeId           Int      @map("cafe_id")
  name             String   @db.VarChar(255)
  description      String?  @db.Text
  price            Int
  isSoldOut        Boolean  @default(false) @map("is_sold_out")
  isRepresentative Boolean  @default(false) @map("is_representative")
  photoUrl         String?  @map("photo_url") @db.Text
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  cafe            Cafe             @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  couponTemplates CouponTemplate[]
  stampPolicies StampPolicy[]

  @@unique([cafeId, name])
  @@map("cafe_menu")
}

model CafePhoto {
  id           Int      @id @default(autoincrement())
  cafeId       Int      @map("cafe_id")
  photoUrl     String   @map("photo_url") @db.Text
  displayOrder Int      @default(0) @map("display_order")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  cafe Cafe @relation(fields: [cafeId], references: [id], onDelete: Cascade)

  @@map("cafe_photo")
}

// ================================
// 4. 리뷰 & 쿠폰 & 알림 도메인
// ================================

model Review {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  cafeId    Int       @map("cafe_id")
  title     String    @db.VarChar(255)
  content   String    @db.Text
  images    Json?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  cafe Cafe @relation(fields: [cafeId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int              @map("user_id")
  cafeId    Int?             @map("cafe_id")
  type      NotificationType
  title     String           @db.VarChar(255)
  content   String           @db.Text
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  cafe Cafe? @relation(fields: [cafeId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

model CouponTemplate {
  id               Int          @id @default(autoincrement())
  cafeId           Int          @map("cafe_id")
  name             String       @db.VarChar(255)
  validDays        Int          @map("valid_days")
  discountType     DiscountType @map("type") // "DISCOUNT" | "FREE_DRINK" | "SIZE_UP"
  discountValue    Int?         @map("discount_value")       // DISCOUNT일 때만 사용
  applicableMenuId Int?         @map("applicable_menu_id")   // FREE_DRINK, SIZE_UP일 때만 사용
  isActive         Boolean      @default(true) @map("is_active")
  expiredAt        DateTime     @map("expired_at")
  createdAt        DateTime     @default(now()) @map("created_at")
  
  // Relations
  cafe           Cafe         @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  applicableMenu CafeMenu?    @relation(fields: [applicableMenuId], references: [id], onDelete: SetNull)
  userCoupons    UserCoupon[]

  @@map("coupon_templates")
}

model UserCoupon {
  id               Int                   @id @default(autoincrement())
  userId           Int                   @map("user_id")
  couponTemplateId Int                   @map("coupon_template_id")
  acquisitionType  CouponAcquisitionType @map("acquisition_type") // 획득 방법
  status           CouponStatus          @default(active)
  issuedAt         DateTime              @default(now()) @map("issued_at")
  expiredAt        DateTime              @map("expired_at")
  usedAt           DateTime?             @map("used_at")
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime              @updatedAt @map("updated_at")

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  couponTemplate CouponTemplate @relation(fields: [couponTemplateId], references: [id], onDelete: Cascade)

  @@map("user_coupons")
}

// ================================
// Enums
// ================================

enum RoleType {
  CUSTOMER
  OWNER
}

enum UserStatus {
  active
  inactive
}

enum ChallengeParticipantStatus {
  in_progress
  completed
  failed
}

enum StampBookStatus {
  active
  expired
  completed
  converted
}

enum PointTransactionType {
  earned
  spent
  refunded
}

enum CafeStatus {
  active
  inactive
  deleted
}

enum NotificationType {
  cafe   // 단골 카페 사장이 보낸 알림
  stamp  // 스탬프 정책 변경시 알림
  review // 스탬프 찍으면, 리뷰 작성하라고 알림
}

enum DiscountType {
  DISCOUNT     // 금액 할인
  FREE_DRINK    // 특정 메뉴 무료 제공
  SIZE_UP      // 사이즈 업그레이드
}

enum CouponStatus {
  active
  used
  expired
}

enum CouponAcquisitionType {
  promotion // 프로모션으로 획득
  stamp // 스탬프로 획득
}

enum ConditionType {
  AMOUNT  // 금액 기준
  COUNT   // 횟수 기준
}

enum RewardType {
  DISCOUNT     // 금액 할인
  SIZE_UP      // 사이즈업
  FREE_DRINK   // 무료 음료
}

enum BusinessHourType {
  SAME_ALL_DAYS
  WEEKDAY_WEEKEND
  DIFFERENT_EACH_DAY
}