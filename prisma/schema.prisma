generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                    @id @default(autoincrement())
  email                 String?                @unique @db.VarChar(255)
  passwordHash          String?                @map("password_hash") @db.VarChar(255)
  phoneNumber           String                 @unique @map("phone_number") @db.VarChar(20)
  nickname              String                 @db.VarChar(50)
  allowKakaoAlert       Boolean                @default(false) @map("allow_kakao_alert")
  status                UserStatus             @default(active)
  fcmToken              String?                @map("fcm_token") @db.VarChar(255)
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  inactivedAt           DateTime?              @map("inactived_at")
  qrCode                String?                @map("qr_code") @db.Text
  badges                Badge[]
  cafes                 Cafe?
  challengeParticipants ChallengeParticipant[]
  kakaoAccount          KakaoAccount?
  notifications         Notification[]
  pointTransactions     PointTransaction[]
  reviews               Review[]
  stampBooks            StampBook[]
  userAgreements        UserAgreement?
  bookmarks             UserBookmark[]
  coupons               UserCoupon[]
  userPreferences       UserPreference?
  roles                 UserRole[]
  verificationCodes     VerificationCode[]

  @@map("users")
}

model UserRole {
  id     Int      @id @default(autoincrement())
  userId Int
  role   RoleType
  user   User     @relation(fields: [userId], references: [id])

  @@unique([userId, role])
  @@map("user_role")
}

model KakaoAccount {
  id        BigInt   @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  socialId  String   @unique @map("social_id") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kakao_accounts")
}

model UserPreference {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique @map("user_id")
  createdAt        DateTime @default(now()) @map("created_at")
  preferredMenu    Json?    @map("preferred_menu")
  preferredStore   Json?    @map("preferred_store")
  preferredTakeout Json?    @map("preferred_tkeout")
  preferredArea    String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model VerificationCode {
  id          Int      @id @default(autoincrement())
  userId      Int?     @map("user_id")
  phoneNumber String   @map("phone_number") @db.VarChar(20)
  code        String   @db.VarChar(10)
  expiresAt   DateTime @map("expires_at")
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "verification_codes_user_id_fkey")
  @@map("verification_codes")
}

model UserAgreement {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique @map("user_id")
  termsAgreed         Boolean  @map("termsAgreed")
  privacyPolicyAgreed Boolean  @map("privacyPolicyAgreed")
  marketingAgreed     Boolean  @map("marketingAgreed")
  locationPermission  Boolean  @map("locationPermission")
  agreedAt            DateTime @map("agreed_at")
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_agreements")
}

model UserBookmark {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  cafeId    Int      @map("cafe_id")
  updatedAt DateTime? @updatedAt @map("updated_at") 
  createdAt DateTime @default(now()) @map("created_at")
  cafe      Cafe     @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, cafeId])
  @@index([cafeId], map: "user_bookmarks_cafe_id_fkey")
  @@map("user_bookmarks")
}

model Challenge {
  id              Int                      @id @default(autoincrement())
  title           String                   @db.VarChar(255)
  description     String                   @db.Text
  thumbnailUrl    String                   @map("thumbnail_url") @db.Text
  startDate       DateTime                 @map("start_date") @db.Date
  endDate         DateTime                 @map("end_date") @db.Date
  isActive        Boolean                  @default(true) @map("is_active")
  createdAt       DateTime                 @default(now()) @map("created_at")
  updatedAt       DateTime                 @updatedAt @map("updated_at")
  goalCount       Int
  goalDescription String                   @db.VarChar(255)
  rewardPoint     Int
  badges          Badge[]
  availableCafes  ChallengeAvailableCafe[]
  participants    ChallengeParticipant[]

  @@map("challenges")
}

model ChallengeParticipant {
  id           Int                        @id @default(autoincrement())
  userId       Int                        @map("user_id")
  challengeId  Int                        @map("challenge_id")
  status       ChallengeParticipantStatus @default(in_progress)
  joinedAt     DateTime                   @map("joined_at")
  completedAt  DateTime?                  @map("completed_at")
  createdAt    DateTime                   @default(now()) @map("created_at")
  updatedAt    DateTime                   @updatedAt @map("updated_at")
  joinedCafeId Int?                       @map("joined_cafe_id")
  challenge    Challenge                  @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  joinedCafe   Cafe?                      @relation("CafeToJoinedChallengeParticipants", fields: [joinedCafeId], references: [id])
  user         User                       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([challengeId], map: "challenge_participants_challenge_id_fkey")
  @@index([joinedCafeId], map: "challenge_participants_joined_cafe_id_fkey")
  @@map("challenge_participants")
}

model ChallengeAvailableCafe {
  id          Int       @id @default(autoincrement())
  challengeId Int       @map("challenge_id")
  cafeId      Int       @map("cafe_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  cafe        Cafe      @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([challengeId, cafeId])
  @@index([cafeId], map: "challenge_available_cafes_cafe_id_fkey")
  @@map("challenge_available_cafes")
}

model BadgeType {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  imageUrl  String   @map("image_url") @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  badges    Badge[]

  @@map("badge_types")
}

model Badge {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  challengeId Int       @map("challenge_id")
  badgeTypeId Int       @map("badge_type_id")
  earnedAt    DateTime  @map("earned_at")
  badgeType   BadgeType @relation(fields: [badgeTypeId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([badgeTypeId], map: "badges_badge_type_id_fkey")
  @@index([challengeId], map: "badges_challenge_id_fkey")
  @@index([userId], map: "badges_user_id_fkey")
  @@map("badges")
}

model StampBook {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  cafeId       Int       @map("cafe_id")
  currentCount Int       @default(0) @map("current_count")
  goalCount    Int       @map("goal_count")

  rewardDetail String    @map("reward_detail") @db.VarChar(255) 
  selectedRewardType  RewardType? @map("selected_reward_type")
  selectedRewardMeta  Json? @map("selected_reward_meta")

  startedAt    DateTime  @map("started_at")
  lastVisitedAt DateTime? @map("last_visited_at")
  expiresAt    DateTime  @map("expires_at")
  extendedAt   DateTime? @map("extended_at")
  expiredAt    DateTime? @map("expired_at")
  completedAt  DateTime? @map("completed_at")
  convertedAt  DateTime? @map("converted_at")
  status       StampBookStatus
  isCompleted  Boolean   @default(false) @map("is_completed")
  isConverted  Boolean   @default(false) @map("is_converted")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  round        Int       @default(1) @map("round")

  pointTransactions PointTransaction[]
  cafe  Cafe @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  stamps Stamp[]

  @@unique([userId, cafeId, round])
  @@index([cafeId], map: "stamp_books_cafe_id_fkey")
  @@map("stamp_books")
}


model Stamp {
  id            Int       @id @default(autoincrement())
  stampBookId   Int       @map("stamp_book_id")
  stampImageUrl String?   @map("stamp_image_url") @db.Text
  stampedAt     DateTime  @map("stamped_at")
  source        String    @db.VarChar(100)
  note          String?   @db.Text
  latitude      Float?
  longitude     Float?
  method        String    @db.VarChar(20)
  stampBook     StampBook @relation(fields: [stampBookId], references: [id], onDelete: Cascade)

  @@index([stampBookId], map: "stamps_stamp_book_id_fkey")
  @@map("stamps")
}

model StampPolicy {
  id               Int    @id @default(autoincrement())
  cafeId           Int    @unique @map("cafe_id")
  selectedImageUrl String @map("selected_image_url") @db.Text

  // 적립 조건
  conditionType  ConditionType @map("condition_type")
  minAmount      Int?          @map("min_amount")
  stampPerAmount Int?          @map("stamp_per_amount")
  drinkCount     Int?          @map("drink_count")
  stampPerCount  Int?          @map("stamp_per_count")

  // 리워드
  rewardType     RewardType @map("reward_type")
  discountAmount Int?       @map("discount_amount")
  menuId         Int?       @map("menu_id")

  hasExpiry Boolean @default(false) @map("has_expiry")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  cafe Cafe      @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  menu CafeMenu? @relation(fields: [menuId], references: [id], onDelete: SetNull)

  @@map("stamp_policies")
}

model StampImage {
  id        Int      @id @default(autoincrement())
  cafeId    Int      @map("cafe_id")
  imageUrl  String   @map("image_url") @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  cafe      Cafe     @relation(fields: [cafeId], references: [id], onDelete: Cascade)

  @@index([cafeId], map: "stamp_images_cafe_id_fkey")
  @@map("stamp_images")
}

model PointTransaction {
  id          Int                  @id @default(autoincrement())
  userId      Int                  @map("user_id")
  stampBookId Int?                 @map("stamp_book_id")
  point       Int
  type        PointTransactionType
  description String               @db.VarChar(255)
  createdAt   DateTime             @default(now()) @map("created_at")
  stampBook   StampBook?           @relation(fields: [stampBookId], references: [id])
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stampBookId], map: "point_transactions_stamp_book_id_fkey")
  @@index([userId], map: "point_transactions_user_id_fkey")
  @@map("point_transactions")
}

model Cafe {
  id                            Int                       @id @default(autoincrement())
  name                          String                    @db.VarChar(255)
  address                       String                    @db.VarChar(500)
  latitude                      Float
  longitude                     Float
  ownerName                     String                    @map("owner_name") @db.VarChar(100)
  businessHours                 Json?                     @map("business_hours")
  phone                         String?                   @db.VarChar(20)
  websiteUrl                    String?                   @map("website_url") @db.Text
  description                   String?                   @db.Text
  storeFilters                  Json?                     @map("store_filters")
  takeOutFilters                Json?                     @map("take_out_filters")
  menuFilters                   Json?                     @map("menu_filters")
  keywords                      Json?
  status                        CafeStatus                @default(inactive)
  createdAt                     DateTime                  @default(now()) @map("created_at")
  updatedAt                     DateTime?                  @updatedAt @map("updated_at")
  ownerId                       Int                       @unique @map("owner_id")
  region1DepthName              String                    @map("region_1depth_name") @db.VarChar(50)
  region2DepthName              String                    @map("region_2depth_name") @db.VarChar(50)
  region3DepthName              String                    @map("region_3depth_name") @db.VarChar(50)
  businessHourType              cafes_business_hour_type? @default(SAME_ALL_DAYS) @map("business_hour_type")
  breakTime                     String?                   @map("break_time") @db.VarChar(20)
  menu                          CafeMenu[]
  photos                        CafePhoto[]
  owner                         User                      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  challengeAvailable            ChallengeAvailableCafe[]
  challengeParticipantsJoinedAt ChallengeParticipant[]    @relation("CafeToJoinedChallengeParticipants")
  CouponTemplate                CouponTemplate[]
  notifications                 Notification[]
  reviews                       Review[]
  stampBooks                    StampBook[]
  stampImages                   StampImage[]
  stampPolicies                 StampPolicy?
  bookmarkedBy                  UserBookmark[]

  @@map("cafes")
}

model CafeMenu {
  id               Int              @id @default(autoincrement())
  cafeId           Int              @map("cafe_id")
  name             String           @db.VarChar(255)
  description      String?          @db.Text
  price            Int
  isSoldOut        Boolean          @default(false) @map("is_sold_out")
  photoUrl         String?          @map("photo_url") @db.Text
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime?         @updatedAt @map("updated_at")
  isRepresentative Boolean          @default(false) @map("is_representative")
  cafe             Cafe             @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  couponTemplates  CouponTemplate[]
  stampPolicies    StampPolicy[]

  @@unique([cafeId, name])
  @@map("cafe_menu")
}

model CafePhoto {
  id           Int      @id @default(autoincrement())
  cafeId       Int      @map("cafe_id")
  photoUrl     String   @map("photo_url") @db.Text
  displayOrder Int      @default(0) @map("display_order")
  createdAt    DateTime @default(now()) @map("created_at")
  cafe         Cafe     @relation(fields: [cafeId], references: [id], onDelete: Cascade)

  @@index([cafeId], map: "cafe_photo_cafe_id_fkey")
  @@map("cafe_photo")
}

model Review {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  cafeId    Int       @map("cafe_id")
  content   String    @db.Text
  images    Json?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  cafe      Cafe      @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([cafeId], map: "reviews_cafe_id_fkey")
  @@index([userId], map: "reviews_user_id_fkey")
  @@map("reviews")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int              @map("user_id")
  cafeId    Int?             @map("cafe_id")
  type      NotificationType
  title     String           @db.VarChar(255)
  content   String           @db.Text
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")
  cafe      Cafe?            @relation(fields: [cafeId], references: [id])
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([cafeId], map: "notifications_cafe_id_fkey")
  @@index([userId], map: "notifications_user_id_fkey")
  @@map("notifications")
}

model CouponTemplate {
  id               Int                   @id @default(autoincrement())
  cafeId           Int                   @map("cafe_id")
  name             String                @db.VarChar(255)
  discountType     coupon_templates_type @map("type") // enum 타입 통일
  discountValue    Int?                  @map("discount_value")
  applicableMenuId Int?                  @map("applicable_menu_id")
  usageCondition   String?               @map("usage_condition")
  startDate        DateTime?             @map("start_date")
  endDate          DateTime?             @map("end_date")
  isActive         Boolean               @default(true) @map("is_active")
  createdAt        DateTime              @default(now()) @map("created_at")
  expiredAt        DateTime?             @map("expired_at")
  validDays        Int?                  @map("valid_days")

  // Relations
  cafe           Cafe         @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  applicableMenu CafeMenu?    @relation(fields: [applicableMenuId], references: [id], onDelete: SetNull)
  userCoupons    UserCoupon[]

  @@index([applicableMenuId], map: "coupon_templates_applicable_menu_id_fkey")
  @@index([cafeId], map: "coupon_templates_cafe_id_fkey")
  @@map("coupon_templates")
}

model UserCoupon {
  id               Int                   @id @default(autoincrement())
  userId           Int                   @map("user_id")
  couponTemplateId Int                   @map("coupon_template_id")
  acquisitionType  CouponAcquisitionType @map("acquisition_type")
  status           CouponStatus          @default(active)
  issuedAt         DateTime              @default(now()) @map("issued_at")
  expiredAt        DateTime?             @map("expired_at")
  usedAt           DateTime?             @map("used_at")
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime?             @updatedAt @map("updated_at")

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  couponTemplate CouponTemplate @relation(fields: [couponTemplateId], references: [id], onDelete: Cascade)

  @@index([couponTemplateId], map: "user_coupons_coupon_template_id_fkey")
  @@index([userId], map: "user_coupons_user_id_fkey")
  @@map("user_coupons")
}

enum RoleType {
  CUSTOMER
  OWNER
}

enum UserStatus {
  active
  inactive
}

enum ChallengeParticipantStatus {
  in_progress
  completed
  failed
}

enum StampBookStatus {
  active
  expired
  completed
  converted
}

enum PointTransactionType {
  earned
  spent
  refunded
}

enum CafeStatus {
  active
  inactive
  deleted
}

enum NotificationType {
  cafe
  stamp
  review
}

enum CouponStatus {
  active
  used
  expired
}

enum CouponAcquisitionType {
  promotion
  stamp
}

enum ConditionType {
  AMOUNT
  COUNT
}

enum RewardType {
  DISCOUNT
  SIZE_UP
  FREE_DRINK
}

enum coupon_templates_type {
  DISCOUNT
  FREE_ITEM
  SIZE_UP
}

enum cafes_business_hour_type {
  SAME_ALL_DAYS
  WEEKDAY_WEEKEND
  EACH_DAY_DIFFERENT
}
