
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  kakao_id: 'kakao_id',
  password_hash: 'password_hash',
  phone_number: 'phone_number',
  nickname: 'nickname',
  role: 'role',
  allow_kakao_alert: 'allow_kakao_alert',
  status: 'status',
  fcm_token: 'fcm_token',
  profile_image_url: 'profile_image_url',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.KakaoAccountScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  social_id: 'social_id',
  created_at: 'created_at'
};

exports.Prisma.UserPreferenceScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  preferred_area: 'preferred_area',
  preferred_keywords: 'preferred_keywords',
  created_at: 'created_at'
};

exports.Prisma.VerificationCodeScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  phone_number: 'phone_number',
  code: 'code',
  expires_at: 'expires_at',
  verified: 'verified',
  created_at: 'created_at'
};

exports.Prisma.UserAgreementScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  terms_agreed: 'terms_agreed',
  privacy_policy_agreed: 'privacy_policy_agreed',
  marketing_agreed: 'marketing_agreed',
  location_permission: 'location_permission',
  agreed_at: 'agreed_at'
};

exports.Prisma.ChallengeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  thumbnail_url: 'thumbnail_url',
  start_date: 'start_date',
  end_date: 'end_date',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ChallengeParticipantScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  challenge_id: 'challenge_id',
  status: 'status',
  joined_at: 'joined_at',
  completed_at: 'completed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ChallengeAvailableCafeScalarFieldEnum = {
  id: 'id',
  challenge_id: 'challenge_id',
  cafe_id: 'cafe_id',
  created_at: 'created_at'
};

exports.Prisma.BadgeTypeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  image_url: 'image_url',
  created_at: 'created_at'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  challenge_id: 'challenge_id',
  badge_type_id: 'badge_type_id',
  earned_at: 'earned_at'
};

exports.Prisma.StampBookScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  cafe_id: 'cafe_id',
  current_count: 'current_count',
  goal_count: 'goal_count',
  reward_detail: 'reward_detail',
  started_at: 'started_at',
  last_visited_at: 'last_visited_at',
  expires_at: 'expires_at',
  extended_at: 'extended_at',
  expired_at: 'expired_at',
  completed_at: 'completed_at',
  converted_at: 'converted_at',
  status: 'status',
  is_completed: 'is_completed',
  is_converted: 'is_converted',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.StampScalarFieldEnum = {
  id: 'id',
  stamp_book_id: 'stamp_book_id',
  stamp_image_url: 'stamp_image_url',
  stamped_at: 'stamped_at',
  source: 'source',
  note: 'note',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.PointTransactionScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  stamp_book_id: 'stamp_book_id',
  point: 'point',
  type: 'type',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.CafeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  region: 'region',
  latitude: 'latitude',
  longitude: 'longitude',
  owner_name: 'owner_name',
  business_hours: 'business_hours',
  phone: 'phone',
  website_url: 'website_url',
  description: 'description',
  store_filters: 'store_filters',
  take_out_filters: 'take_out_filters',
  menu_filters: 'menu_filters',
  keywords: 'keywords',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CafeMenuScalarFieldEnum = {
  id: 'id',
  cafe_id: 'cafe_id',
  category: 'category',
  name: 'name',
  description: 'description',
  price: 'price',
  is_sold_out: 'is_sold_out',
  photo_url: 'photo_url',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CafePhotoScalarFieldEnum = {
  id: 'id',
  cafe_id: 'cafe_id',
  photo_url: 'photo_url',
  display_order: 'display_order',
  created_at: 'created_at'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  cafe_id: 'cafe_id',
  title: 'title',
  content: 'content',
  images: 'images',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  cafe_id: 'cafe_id',
  type: 'type',
  title: 'title',
  content: 'content',
  is_read: 'is_read',
  created_at: 'created_at'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  cafe_id: 'cafe_id',
  type: 'type',
  name: 'name',
  status: 'status',
  issued_at: 'issued_at',
  expired_at: 'expired_at',
  used_at: 'used_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  CUSTOMER: 'CUSTOMER',
  OWNER: 'OWNER'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  inactive: 'inactive'
};

exports.CafeStatus = exports.$Enums.CafeStatus = {
  active: 'active',
  inactive: 'inactive',
  deleted: 'deleted'
};

exports.Prisma.ModelName = {
  User: 'User',
  KakaoAccount: 'KakaoAccount',
  UserPreference: 'UserPreference',
  VerificationCode: 'VerificationCode',
  UserAgreement: 'UserAgreement',
  Challenge: 'Challenge',
  ChallengeParticipant: 'ChallengeParticipant',
  ChallengeAvailableCafe: 'ChallengeAvailableCafe',
  BadgeType: 'BadgeType',
  Badge: 'Badge',
  StampBook: 'StampBook',
  Stamp: 'Stamp',
  PointTransaction: 'PointTransaction',
  Cafe: 'Cafe',
  CafeMenu: 'CafeMenu',
  CafePhoto: 'CafePhoto',
  Review: 'Review',
  Notification: 'Notification',
  Coupon: 'Coupon'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
