openapi: 3.0.0
info:
  title: LOOPy API
  description: 루피 프로젝트 백엔드 API 문서입니다.
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: 로컬 개발 서버

paths:
  /health:
    get:
      summary: 헬스 체크
      description: 서버가 정상 작동 중인지 확인하기 위한 API
      tags:
        - Health
      responses:
        "200":
          description: 서버 작동 정상
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: string
                    example: 루피 백엔드 작동 중!
    
  /api/v1/auth/signup:
    post:
      summary: 이메일 회원가입
      description: 사용자가 이메일, 비밀번호, 닉네임, 전화번호, 알림 수신 동의 및 약관 동의 정보를 제출하여 회원가입
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 회원가입 성공
                      userId:
                        type: string
                        example: "7"
                      nickname:
                        type: string
                        example: "테스터"
        '400':
          description: 잘못된 요청 (필수 항목 누락 또는 중복된 이메일 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login:
    post:
      summary: 이메일 로그인
      description: 사용자가 이메일과 비밀번호로 로그인, JWT 토큰과 사용자 정보를 발급
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 로그인 성공
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "6"
                          email:
                            type: string
                            example: test@example.com
                          nickname:
                            type: string
                            example: 테스터
        '400':
          description: 이메일 또는 비밀번호 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/logout:
    post:
      summary: 로그아웃
      description: JWT 토큰을 사용하여 인증된 사용자의 로그아웃 처리
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 로그아웃 완료
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    /api/v1/point/current:
    get:
      summary: 현재 포인트 조회
      description: 인증된 사용자의 현재 보유 포인트를 조회
      tags:
        - Point
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 현재 포인트 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 현재 포인트 조회 성공
                      currentPoint:
                        type: integer
                        example: 1200
        "401":
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/users/me/fcm-token:
    post:
      summary: FCM 토큰 저장
      description: 사용자의 FCM 푸시 알림 토큰을 저장
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FcmTokenRequest'
      responses:
        '200':
          description: FCM 토큰 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: fcmToken이 저장되었습니다.
        '400':
          description: 잘못된 요청 (fcmToken 누락 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/inactive:
    patch:
      summary: 휴면 계정 전환
      description: 인증된 사용자의 계정을 휴면 상태(`inactive`)로 전환
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 계정 휴면 전환 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 계정이 휴면 상태로 전환되었습니다.
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "1"
                      status:
                        type: string
                        enum: [active, inactive]
                        example: inactive
                      inactivedAt:
                        type: string
                        format: date-time
                        example: "2025-07-17T15:46:09.924Z"
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/active:
    patch:
      summary: 휴면 계정 활성화
      description: 휴면 상태인 계정을 다시 활성화
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 계정 활성화 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 계정이 다시 활성화되었습니다.
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "1"
                      status:
                        type: string
                        enum: [active, inactive]
                        example: active
                      inactivedAt:
                        type: string
                        nullable: true
                        example: null
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/verify-phone:
    post:
      summary: SMS 인증 확인 및 전화번호 저장
      description: Firebase에서 발급한 ID 토큰을 검증하여 인증된 사용자의 전화번호를 저장
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneVerificationRequest'
      responses:
        '200':
          description: 전화번호 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 전화번호 등록 완료
                  userId:
                    type: integer
                    example: 12
                  nickname:
                    type: string
                    example: 테스트 사용자
        '400':
          description: 잘못된 요청 (idToken 누락 또는 유효하지 않음)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me:
    get:
      summary: 사용자 정보 조회
      description: 인증된 사용자의 정보를 조회
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/nickname:
    patch:
      summary: 닉네임 수정
      description: 인증된 사용자의 닉네임을 수정
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NicknameUpdateRequest'
      responses:
        '200':
          description: 닉네임 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 닉네임이 성공적으로 변경되었습니다.
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "2"
                      nickname:
                        type: string
                        example: 새로운유진
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2025-07-18T06:49:44.605Z"
        '400':
          description: 잘못된 닉네임 형식
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/agreements:
    post:
      summary: 약관 동의 저장
      description: 인증된 사용자의 약관 동의 상태를 저장
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAgreementRequest'
      responses:
        '200':
          description: 약관 동의 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 약관 동의 저장 완료
                  agreement:
                    $ref: '#/components/schemas/UserAgreementResponse'
        '400':
          description: 필수 항목 누락 또는 잘못된 값
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/preferences:
    patch:
      summary: 선호 키워드 저장
      description: 인증된 사용자의 선호 키워드 목록을 저장하거나 업데이트
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserKeywordPreferenceRequest'
      responses:
        '200':
          description: 키워드 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 선호 키워드가 저장되었습니다.
                  preferredKeywords:
                    type: array
                    items:
                      type: string
                    example: [ "노트북", "1인석", "디카페인" ]
        '400':
          description: 잘못된 요청 (키워드 형식 오류 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/preferred-area:
    patch:
      summary: 자주 가는 동네 저장
      description: 인증된 사용자의 선호 지역(동네)을 저장하거나 업데이트
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferredAreaRequest'
      responses:
        '200':
          description: 동네 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 자주 가는 동네가 저장되었습니다.
                      preferredArea:
                        type: string
                        example: 서울 마포구 신촌동
        '400':
          description: 유효하지 않은 동네명
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/alert-settings:
    patch:
      summary: 카카오 알림톡 허용 여부 저장
      description: 인증된 사용자의 카카오 알림톡 수신 여부를 저장
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KakaoAlertSettingRequest'
      responses:
        '200':
          description: 설정 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 카카오 알림톡이 허용되었습니다.
        '400':
          description: 잘못된 요청 (allowKakaoAlert 누락 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/bookmarks:
    get:
      summary: 북마크한 카페 목록 조회
      description: 인증된 사용자가 북마크한 카페 목록을 조회
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 북마크 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 북마크한 카페 목록 조회 성공
                      bookmarks:
                        type: array
                        items:
                          $ref: '#/components/schemas/BookmarkedCafe'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/bookmarks:
    patch:
      summary: 북마크 추가
      description: 인증된 사용자가 특정 카페를 북마크
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkRequest'
      responses:
        '200':
          description: 북마크 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 북마크가 저장되었습니다.
                      cafeId:
                        type: string
                        example: "1"
        '400':
          description: 잘못된 요청 또는 이미 북마크된 카페
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/bookmarks/{cafeId}:
    delete:
      summary: 북마크 삭제
      description: 인증된 사용자가 특정 카페의 북마크를 삭제
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: cafeId
          in: path
          required: true
          description: 삭제할 카페의 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 북마크 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 북마크가 삭제되었습니다.
                      cafeId:
                        type: string
                        example: "1"
        '400':
          description: 존재하지 않는 북마크 또는 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/point/transactions:
    get:
      summary: 포인트 거래 내역 조회
      description: 인증된 사용자의 포인트 적립/사용/환불 내역을 최신순으로 조회
      tags:
        - Point
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 포인트 거래 내역 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: array
                    items:
                      $ref: "#/components/schemas/PointTransaction"
        "401":
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


  /api/v1/cafe/{cafeId}:
    get:
      summary: 카페 상세 조회
      description: 특정 카페의 상세 정보를 조회합니다
      tags:
        - Cafes
      parameters:
        - name: cafeId
          in: path
          required: true
          description: 조회할 카페의 ID
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: 카페 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    $ref: "#/components/schemas/CafeDetail"
        "400":
          description: 잘못된 요청 - 카페 ID 누락
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: 리소스를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/cafe/{cafeId}/coupon:
    get:
      summary: 카페 쿠폰 목록 조회
      description: 특정 카페에서 사용 가능한 쿠폰 목록을 조회합니다. 쿠폰이 없는 경우 빈 배열을 반환합니다.
      tags:
        - Cafes
      parameters:
        - name: cafeId
          in: path
          required: true
          description: 조회할 카페의 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 쿠폰 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: array
                    items:
                      $ref: '#/components/schemas/CouponTemplate'

    post:
      summary: 카페 쿠폰 발급
      description: 특정 카페의 쿠폰 템플릿을 사용하여 사용자에게 쿠폰을 발급합니다.
      tags:
        - Cafes
      parameters:
        - name: cafeId
          in: path
          required: true
          description: 쿠폰을 발급할 카페의 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponIssueRequest'
      responses:
        '200':
          description: 쿠폰 발급 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    $ref: '#/components/schemas/IssuedCoupon'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/cafe/{cafeId}/stamp:
    get:
      summary: 카페 스탬프 정보 조회
      description: 특정 카페의 스탬프 적립 현황을 조회합니다. 스탬프 정보가 없는 경우 빈 객체를 반환합니다.
      tags:
        - Cafes
      parameters:
        - name: cafeId
          in: path
          required: true
          description: 조회할 카페의 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 스탬프 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    $ref: '#/components/schemas/StampInfo'

  /api/v1/cafe/{cafeId}/review:
    get:
      summary: 카페 리뷰 목록 조회
      description: 특정 카페의 리뷰 목록을 페이지네이션으로 5개씩 조회합니다. cursor 파라미터를 통해 다음 페이지를 요청할 수 있습니다.
      tags:
        - Cafes
      parameters:
        - name: cafeId
          in: path
          required: true
          description: 조회할 카페의 ID
          schema:
            type: integer
            example: 1
        - name: cursor
          in: query
          required: false
          description: 페이지네이션을 위한 커서 (다음 페이지 요청시 사용)
          schema:
            type: string
            example: "10"
      responses:
        '200':
          description: 리뷰 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    $ref: '#/components/schemas/ReviewListResponse'
  /api/v1/challenges:
    get:
      summary: 챌린지 목록 조회
      description: 현재 유효한 챌린지 목록을 조회합니다. (종료일 오름차순 정렬)
      tags: [Challenge]
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                  error:
                    type: string
                    nullable: true
                  success:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                        description:
                          type: string
                        thumbnailUrl:
                          type: string
                        startDate:
                          type: string
                          format: date
                        endDate:
                          type: string
                          format: date
                        isParticipated:
                          type: boolean

  /api/v1/challenges/{challengeId}:
    get:
      summary: 챌린지 상세 조회
      description: 챌린지 ID로 상세 정보를 조회합니다.
      tags: [Challenge]
      parameters:
        - in: path
          name: challengeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                  error:
                    type: string
                    nullable: true
                  success:
                    type: object
                    properties:
                      id: { type: integer }
                      title: { type: string }
                      description: { type: string }
                      thumbnailUrl: { type: string }
                      startDate: { type: string, format: date }
                      endDate: { type: string, format: date }
                      goalDescription: { type: string }
                      goalCount: { type: integer }
                      rewardPoint: { type: integer }
                      isParticipated: { type: boolean }
                      availableCafes:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer }
                            name: { type: string }
                            address: { type: string }
                            region1DepthName: { type: string }
                            region2DepthName: { type: string }
                            region3DepthName: { type: string }

  /api/v1/challenges/{challengeId}/join:
    post:
      summary: 챌린지 참여
      description: 해당 챌린지에 로그인 유저가 참여합니다.
      tags: [Challenge]
      parameters:
        - in: path
          name: challengeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType: { type: string }
                  error: { type: string, nullable: true }
                  success:
                    type: object
                    properties:
                      message: { type: string }

  /api/v1/challenges/{challengeId}/cafes:
    get:
      summary: 참여 가능 매장 조회
      description: 특정 챌린지에 참여 가능한 카페 목록을 반환합니다.
      tags: [Challenge]
      parameters:
        - in: path
          name: challengeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType: { type: string }
                  error: { type: string, nullable: true }
                  success:
                    type: array
                    items:
                      type: object
                      properties:
                        cafeId: { type: integer }
                        name: { type: string }
                        address: { type: string }
                        region: { type: string }
                        distance: { type: number }

  /api/v1/users/me/challenges:
    get:
      summary: 나의 챌린지 목록 조회
      description: 로그인 유저가 현재 참여 중인 챌린지 목록을 조회합니다.
      tags: [Challenge]
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType: { type: string }
                  error: { type: string, nullable: true }
                  success:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        title: { type: string }
                        thumbnailUrl: { type: string }
                        tag: { type: string, nullable: true }
                        startDate: { type: string, format: date }
                        endDate: { type: string, format: date }

  /api/v1/challenges/{challengeId}/complete:
    post:
      summary: 챌린지 완료 처리
      description: 챌린지를 완료 처리하고 쿠폰을 발급합니다.
      tags: [Challenge]
      parameters:
        - in: path
          name: challengeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType: { type: string }
                  error: { type: string, nullable: true }
                  success:
                    type: object
                    properties:
                      message: { type: string }
                      couponId: { type: integer, nullable: true }
  /api/v1/users/me/stampbooks:
    get:
      summary: 전체 스탬프북 조회
      description: 로그인한 사용자의 전체 스탬프북을 정렬 기준에 따라 조회
      tags:
        - Stamp
      parameters:
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [mostStamped, shortestDeadline]
          description: 정렬 기준 (적립 많은 순 or 기한 짧은 순). 기본값: 생성일 내림차순
      responses:
        '200':
          description: 스탬프북 리스트 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StampBookListResponse'

  /api/v1/stampbooks/{stampBookId}:
    get:
      summary: 스탬프북 상세 조회
      description: 특정 스탬프북의 상세 정보를 조회
      tags:
        - Stamp
      parameters:
        - in: path
          name: stampBookId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 스탬프북 상세 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StampBookDetail'

  /api/v1/stampbooks/{stampBookId}/stamps:
    post:
      summary: 도장 적립
      description: 스탬프북에 도장 1개 적립 (QR or 수동 방식)
      tags:
        - Stamp
      parameters:
        - in: path
          name: stampBookId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cafeId:
                  type: integer
                method:
                  type: string
                  enum: [QR, MANUAL]
      responses:
        '200':
          description: 도장 적립 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  stampCount:
                    type: integer
                  isStampbookCompleted:
                    type: boolean

  /api/v1/stampbooks/{stampBookId}/convert:
    post:
      summary: 스탬프 → 포인트 환전
      description: 완료된 스탬프북을 포인트로 환전
      tags:
        - Stamp
      parameters:
        - in: path
          name: stampBookId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 환전 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  stampCount:
                    type: integer
                  pointAmount:
                    type: integer

    delete:
      summary: 환전 취소
      description: 환전 후 3일 이내 환전 취소
      tags:
        - Stamp
      parameters:
        - in: path
          name: stampBookId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 환전 취소 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  refundPoint:
                    type: integer

  /api/v1/stampbooks/{stampBookId}/extend:
    patch:
      summary: 스탬프북 기간 연장
      description: 진행 중인 스탬프북의 만료일을 14일 연장
      tags:
        - Stamp
      parameters:
        - in: path
          name: stampBookId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 연장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  newExpiresAt:
                    type: string
                    format: date-time

  /api/v1/users/me/stampbooks/expiring:
    get:
      summary: 소멸 임박 스탬프북 조회
      description: 7일 이내 만료 예정인 active 스탬프북 목록 조회
      tags:
        - Stamp
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StampBookExpiring'

components:
  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: string
          example: "2"
        email:
          type: string
          example: test@example.com
        phoneNumber:
          type: string
          example: "01012345678"
        nickname:
          type: string
          example: 유진
        role:
          type: string
          enum: [CUSTOMER, OWNER]
          example: CUSTOMER
        status:
          type: string
          enum: [active, inactive]
          example: active
        allowKakaoAlert:
          type: boolean
          example: false
        profileImageUrl:
          type: string
          nullable: true
          example: null
        fcmToken:
          type: string
          nullable: true
          example: null
        createdAt:
          type: string
          format: date-time
          example: "2025-07-01T10:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-07-17T16:30:00.000Z"
        inactivedAt:
          type: string
          format: date-time
          nullable: true
          example: null

    UserAgreementRequest:
      type: object
      required:
        - termsAgreed
        - privacyPolicyAgreed
        - marketingAgreed
        - locationPermission
      properties:
        termsAgreed:
          type: boolean
          example: true
        privacyPolicyAgreed:
          type: boolean
          example: true
        marketingAgreed:
          type: boolean
          example: false
        locationPermission:
          type: boolean
          example: true

    UserKeywordPreferenceRequest:
      type: object
      required:
        - preferredKeywords
      properties:
        preferredKeywords:
          type: array
          items:
            type: string
          example:
            - 노트북
            - 1인석
            - 디카페인

    UserAgreementResponse:
      type: object
      properties:
        id:
          type: string
          example: "1"
        userId:
          type: string
          example: "1"
        termsAgreed:
          type: boolean
          example: true
        privacyPolicyAgreed:
          type: boolean
          example: true
        marketingAgreed:
          type: boolean
          example: false
        locationPermission:
          type: boolean
          example: true
        agreedAt:
          type: string
          format: date-time
          example: "2025-07-23T04:40:50.464Z"

    UserPreferredAreaRequest:
      type: object
      required:
        - preferredArea
      properties:
        preferredArea:
          type: string
          example: 서울 마포구 신촌동

    KakaoAlertSettingRequest:
      type: object
      required:
        - allowKakaoAlert
      properties:
        allowKakaoAlert:
          type: boolean
          example: true

    BookmarkedCafe:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: 테스트카페
        address:
          type: string
          example: 서울시 마포구 양화로 123
        region:
          type: string
          example: 마포구
        latitude:
          type: number
          example: 37.5509
        longitude:
          type: number
          example: 126.9143
        description:
          type: string
          nullable: true
          example: null
        keywords:
          type: array
          nullable: true
          items:
            type: string
          example: null
        status:
          type: string
          enum: [active, inactive, deleted]
          example: active
        createdAt:
          type: string
          format: date-time
          example: "2025-07-19T09:21:39.933Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-07-19T09:20:09.040Z"

    CafeDetail:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "로스터리 카페"
        address:
          type: string
          example: "서울시 강남구 테헤란로 123"
        region:
          type: string
          example: "강남구"
        businessHours:
          type: string
          example: "평일 07:00-22:00, 주말 08:00-23:00"
        phone:
          type: string
          example: "02-1234-5678"
        websiteUrl:
          type: string
          example: "https://roastery-cafe.com"
        description:
          type: string
          example: "신선한 원두를 직접 로스팅하는 스페셜티 커피 전문점입니다."
        storeFilters:
          $ref: "#/components/schemas/StoreFilters"
        takeOutFilters:
          $ref: "#/components/schemas/TakeOutFilters"
        menuFilters:
          $ref: "#/components/schemas/MenuFilters"
        keywords:
          type: array
          items:
            type: string
          example: ["커피", "로스팅", "스페셜티", "조용한"]
        photos:
          type: array
          items:
            $ref: "#/components/schemas/CafePhoto"
        menu:
          type: array
          items:
            $ref: "#/components/schemas/MenuItem"

    StoreFilters:
      type: object
      properties:
        "1인석":
          type: boolean
          example: true
        "단체석":
          type: boolean
          example: false
        "노트북석":
          type: boolean
          example: true
        "애견 동반":
          type: boolean
          example: false
        "예약 가능":
          type: boolean
          example: false
        "주차 가능":
          type: boolean
          example: true
        "24시간 운영":
          type: boolean
          example: false
        "와이파이 제공":
          type: boolean
          example: true

    TakeOutFilters:
      type: object
      properties:
        "포장 할인":
          type: boolean
          example: false
        "텀블러 할인":
          type: boolean
          example: true

    MenuFilters:
      type: object
      properties:
        "비건":
          type: boolean
          example: false
        "디카페인":
          type: boolean
          example: true
        "글루텐프리":
          type: boolean
          example: true
        "저당/무카당":
          type: boolean
          example: true

    CafePhoto:
      type: object
      properties:
        id:
          type: string
          example: "1"
        url:
          type: string
          example: "https://example.com/photos/roastery-exterior.jpg"
        displayOrder:
          type: integer
          example: 1

    MenuItem:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "시그니처 아메리카노"
        price:
          type: integer
          example: 4500
        description:
          type: string
          example: "하우스 블렌드 원두로 추출한 깔끔한 아메리카노"
        imgUrl:
          type: string
          example: "https://example.com/menu/signature-americano.jpg"
        isSoldOut:
          type: boolean
          example: false

    CouponTemplate:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "시그니처 아메리카노 무료"
        validDays:
          type: integer
          description: 쿠폰 유효 기간 (일)
          example: 30
        discountType:
          type: string
          enum: [fixed, percentage]
          description: 할인 타입 (fixed: 정액 할인, percentage: 퍼센트 할인)
          example: "fixed"
        discountValue:
          type: integer
          description: 할인 값 (정액할인시 원, 퍼센트할인시 %)
          example: 4500
        applicableMenu:
          type: string
          nullable: true
          description: 적용 가능한 메뉴 (null이면 전체 메뉴)
          example: null
        expiredAt:
          type: string
          format: date-time
          description: 쿠폰 템플릿 만료 일시
          example: "2025-12-31T23:59:59.000Z"

    CouponIssueRequest:
      type: object
      required:
        - id
        - name
        - validDays
        - discountType
        - discountValue
        - expiredAt
      properties:
        id:
          type: string
          example: "5"
        name:
          type: string
          example: "디저트 무료 쿠폰"
        validDays:
          type: integer
          example: 60
        discountType:
          type: string
          enum: [fixed, percentage]
          example: "fixed"
        discountValue:
          type: integer
          example: 6500
        applicableMenu:
          type: string
          nullable: true
          example: null
        expiredAt:
          type: string
          format: date-time
          example: "2026-02-28T23:59:59.000Z"

    IssuedCoupon:
      type: object
      properties:
        id:
          type: string
          example: "10"
        expiredAt:
          type: string
          format: date-time
          example: "2025-09-18T15:54:02.939Z"
        acquisitionType:
          type: string
          example: "promotion"
        couponTemplate:
          $ref: '#/components/schemas/CouponTemplate'
        couponTemplateId:
          type: string
          example: "5"

    StampInfo:
      type: object
      properties:
        id:
          type: string
          example: "1"
        currentCount:
          type: integer
          description: 현재 적립된 스탬프 개수
          example: 3
        goalCount:
          type: integer
          description: 목표 스탬프 개수
          example: 10
        expiresAt:
          type: string
          format: date-time
          description: 스탬프 만료 일시
          example: "2025-12-31T23:59:59.000Z"

    ReviewListResponse:
      type: object
      properties:
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        nextCursor:
          type: string
          nullable: true
          description: 다음 페이지를 위한 커서 (마지막 페이지인 경우 null)
          example: "10"
        hasNextPage:
          type: boolean
          description: 다음 페이지 존재 여부
          example: true

    Review:
      type: object
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "로스터리 커피 맛집!"
        content:
          type: string
          example: "원두를 직접 로스팅해서 향이 정말 좋아요. 전문가가 추천하는 원두도 살 수 있어서 좋습니다."
        nickname:
          type: string
          example: "커피러버"
        createdAt:
          type: string
          format: date-time
          example: "2025-07-19T10:30:00.000Z"
        images:
          type: array
          items:
            type: string
          description: 리뷰 이미지 URL 목록
          example: 
            - "https://example.com/review1-1.jpg"
            - "https://example.com/review1-2.jpg"

    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          enum: [C001, C005, C006]
        reason:
          type: string
        data:
          type: "null"
          example: null

        RegisterRequest:
      type: object
      required:
        - email
        - password
        - nickname
        - phoneNumber
        - allowKakaoAlert
        - agreements
      properties:
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          format: password
          example: securepassword123
        nickname:
          type: string
          example: 테스터
        phoneNumber:
          type: string
          example: "01012345678"
        allowKakaoAlert:
          type: boolean
          example: true
        agreements:
          type: object
          required:
            - termsAgreed
            - privacyPolicyAgreed
            - marketingAgreed
            - locationPermission
          properties:
            termsAgreed:
              type: boolean
              example: true
            privacyPolicyAgreed:
              type: boolean
              example: true
            marketingAgreed:
              type: boolean
              example: false
            locationPermission:
              type: boolean
              example: true

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          format: password
          example: securepassword123

    FcmTokenRequest:
      type: object
      required:
        - fcmToken
      properties:
        fcmToken:
          type: string
          example: abc123xyz456

    PhoneVerificationRequest:
      type: object
      required:
        - idToken
      properties:
        idToken:
          type: string
          description: Firebase에서 발급된 ID 토큰
          example: FIREBASE_ID_TOKEN
    
    NicknameUpdateRequest:
      type: object
      required:
        - nickname
      properties:
        nickname:
          type: string
          example: 새로운유진

    BookmarkRequest:
      type: object
      required:
        - cafeId
      properties:
        cafeId:
          type: integer
          example: 1


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
  - name: Users
    description: 사용자 정보 및 설정 관련 API


ChallengeListItem:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        thumbnailUrl:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        isParticipated:
          type: boolean

ChallengeListResponse:
    type: array
    items:
      $ref: '#/components/schemas/ChallengeListItem'

ChallengeAvailableCafe:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        region1DepthName:
          type: string
        region2DepthName:
          type: string
        region3DepthName:
          type: string

    ChallengeDetail:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        thumbnailUrl:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        goalDescription:
          type: string
        goalCount:
          type: integer
        rewardPoint:
          type: integer
        isParticipated:
          type: boolean
        availableCafes:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeAvailableCafe'

    MyChallengeListItem:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        thumbnailUrl:
          type: string
        tag:
          type: string
          nullable: true
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date

    MyChallengeListResponse:
      type: array
      items:
        $ref: '#/components/schemas/MyChallengeListItem'

    StampBookListItem:
      type: object
      properties:
        id:
          type: integer
        cafe:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            address:
              type: string
        currentCount:
          type: integer
        goalCount:
          type: integer
        status:
          type: string
        expiredAt:
          type: string
          format: date-time

    StampBookListResponse:
      type: array
      items:
        $ref: '#/components/schemas/StampBookListItem'

    Stamp:
      type: object
      properties:
        id:
          type: integer
        stampedAt:
          type: string
          format: date-time
        stampImageUrl:
          type: string
        source:
          type: string
        note:
          type: string
        latitude:
          type: number
        longitude:
          type: number

    StampBookDetail:
      type: object
      properties:
        id:
          type: integer
        cafe:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            address:
              type: string
        goalCount:
          type: integer
        currentCount:
          type: integer
        status:
          type: string
        isCompleted:
          type: boolean
        rewardDetail:
          type: string
        startedAt:
          type: string
          format: date-time
        lastVisitedAt:
          type: string
          format: date-time
          nullable: true
        expiresAt:
          type: string
          format: date-time
        extendedAt:
          type: string
          format: date-time
          nullable: true
        expiredAt:
          type: string
          format: date-time
          nullable: true
        completedAt:
          type: string
          format: date-time
          nullable: true
        convertedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        stamps:
          type: array
          items:
            $ref: '#/components/schemas/Stamp'

    StampBookExpiring:
      type: object
      properties:
        id:
          type: integer
        cafe:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            address:
              type: string
        expiresAt:
          type: string
          format: date-time
        status:
          type: string

    StampConversionResult:
      type: object
      properties:
        message:
          type: string
        stampCount:
          type: integer
        pointAmount:
          type: integer

    StampCancelConversionResult:
      type: object
      properties:
        message:
          type: string
        refundPoint:
          type: integer

    StampBookExtendResult:
      type: object
      properties:
        message:
          type: string
        newExpiresAt:
          type: string
          format: date-time
