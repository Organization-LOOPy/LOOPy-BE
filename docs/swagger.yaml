openapi: 3.0.0
info:
  title: LOOPy API(테스트)
  description: 루피 프로젝트 백엔드 API 문서입니다!
  version: 1.0.0

servers:
  - url: https://loopyxyz.duckdns.org/
    description: 로컬 개발 서버

security:
  - bearerAuth: []

paths:
  /health:
    get:
      summary: 헬스 체크
      description: 서버가 정상 작동 중인지 확인하기 위한 API
      tags:
        - Health
      responses:
        "200":
          description: 서버 작동 정상
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: string
                    example: 루피 백엔드 작동 중!
    
  /api/v1/auth/signup:
    post:
      summary: 이메일 회원가입
      description: 사용자가 이메일, 비밀번호, 닉네임, 전화번호, 사용자 역할, 알림 수신 동의 및 약관 동의 정보를 제출하여 회원가입
      tags:
        - Auth
      security: [] 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              email: test@example.com
              password: securepassword123
              nickname: 테스터
              phoneNumber: "01012345678"
              role: CUSTOMER
              allowKakaoAlert: true
              agreements:
                termsAgreed: true
                privacyPolicyAgreed: true
                marketingAgreed: false
                locationPermission: true
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 회원가입 성공
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          description: 잘못된 요청 (필수 항목 누락 또는 중복된 이메일 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login:
    post:
      summary: 이메일 로그인
      description: 사용자가 이메일과 비밀번호로 로그인, JWT 토큰과 사용자 정보를 발급
      tags:
        - Auth
      security: [] 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 로그인 성공
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: '#/components/schemas/LoginUserProfile'
        '400':
          description: 이메일 또는 비밀번호 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v1/auth/logout:
    post:
      summary: 로그아웃
      description: JWT 토큰을 사용하여 인증된 사용자의 로그아웃 처리
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 로그아웃 완료
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/points/current:
    get:
      summary: 현재 포인트 조회
      description: 인증된 사용자의 현재 보유 포인트를 조회
      tags:
        - Point
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 현재 포인트 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 현재 포인트 조회 성공
                      currentPoint:
                        type: integer
                        example: 1200
        "401":
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/users/me/fcm-token:
    patch:
      summary: FCM 토큰 저장
      description: 사용자의 FCM 푸시 알림 토큰을 저장
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FcmTokenRequest'
      responses:
        '200':
          description: FCM 토큰 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: fcmToken이 저장되었습니다.
        '400':
          description: 잘못된 요청 (fcmToken 누락 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/inactive:
    patch:
      summary: 휴면 계정 전환
      description: 인증된 사용자의 계정을 휴면 상태(`inactive`)로 전환
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 계정 휴면 전환 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 계정이 휴면 상태로 전환되었습니다.
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "1"
                      status:
                        type: string
                        enum: [active, inactive]
                        example: inactive
                      inactivedAt:
                        type: string
                        format: date-time
                        example: "2025-07-17T15:46:09.924Z"
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/activate:
    patch:
      summary: 휴면 계정 활성화
      description: 휴면 상태인 계정을 다시 활성화
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 계정 활성화 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 계정이 다시 활성화되었습니다.
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "1"
                      status:
                        type: string
                        enum: [active, inactive]
                        example: active
                      inactivedAt:
                        type: string
                        nullable: true
                        example: null
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/verify-phone:
    post:
      summary: SMS 인증 확인 및 전화번호 저장
      description: Firebase에서 발급한 ID 토큰을 검증하여 인증된 사용자의 전화번호를 저장
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneVerificationRequest'
      responses:
        '200':
          description: 전화번호 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 전화번호 등록 완료
                  userId:
                    type: integer
                    example: 12
                  nickname:
                    type: string
                    example: 테스트 사용자
        '400':
          description: 잘못된 요청 (idToken 누락 또는 유효하지 않음)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me:
    get:
      summary: 사용자 정보 조회
      description: 인증된 사용자의 정보를 조회
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/nickname:
    patch:
      summary: 닉네임 수정
      description: 인증된 사용자의 닉네임을 수정
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NicknameUpdateRequest'
      responses:
        '200':
          description: 닉네임 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 닉네임이 성공적으로 변경되었습니다.
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "2"
                      nickname:
                        type: string
                        example: 새로운닉네임
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2025-07-18T06:49:44.605Z"
        '400':
          description: 잘못된 닉네임 형식
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/agreements:
    post:
      summary: 약관 동의 저장
      description: 인증된 사용자의 약관 동의 상태를 저장
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAgreementRequest'
      responses:
        '200':
          description: 약관 동의 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 약관 동의 저장 완료
                  agreement:
                    $ref: '#/components/schemas/UserAgreementResponse'
        '400':
          description: 필수 항목 누락 또는 잘못된 값
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/preferences:
    patch:
      summary: 선호 키워드 저장
      description: 인증된 사용자의 선호 키워드 목록을 저장하거나 업데이트
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserKeywordPreferenceRequest'
      responses:
        '200':
          description: 키워드 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 선호 키워드가 저장되었습니다.
                  preferredKeywords:
                    type: array
                    items:
                      type: string
                    example: [ "노트북", "1인석", "디카페인" ]
        '400':
          description: 잘못된 요청 (키워드 형식 오류 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/preferred-area:
    patch:
      summary: 자주 가는 동네 저장
      description: 인증된 사용자의 선호 지역(동네)을 저장하거나 업데이트
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferredAreaRequest'
      responses:
        '200':
          description: 동네 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 자주 가는 동네가 저장되었습니다.
                      preferredArea:
                        type: string
                        example: 서울 마포구 신촌동
        '400':
          description: 유효하지 않은 동네명
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/kakao-alert:
    patch:
      summary: 카카오 알림톡 허용 여부 저장
      description: 인증된 사용자의 카카오 알림톡 수신 여부를 저장
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KakaoAlertSettingRequest'
      responses:
        '200':
          description: 설정 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 카카오 알림톡이 허용되었습니다.
        '400':
          description: 잘못된 요청 (allowKakaoAlert 누락 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/bookmarks:
    get:
      summary: 북마크한 카페 목록 조회
      description: 인증된 사용자가 북마크한 카페 목록을 조회
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 북마크 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 북마크한 카페 목록 조회 성공
                      bookmarks:
                        type: array
                        items:
                          $ref: '#/components/schemas/BookmarkedCafe'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/bookmarks:
    patch:
      summary: 북마크 추가
      description: 인증된 사용자가 특정 카페를 북마크
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkRequest'
      responses:
        '200':
          description: 북마크 저장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 북마크가 저장되었습니다.
                      cafeId:
                        type: string
                        example: "1"
        '400':
          description: 잘못된 요청 또는 이미 북마크된 카페
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me/bookmarks/{cafeId}:
    delete:
      summary: 북마크 삭제
      description: 인증된 사용자가 특정 카페의 북마크를 삭제
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: cafeId
          in: path
          required: true
          description: 삭제할 카페의 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 북마크 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 북마크가 삭제되었습니다.
                      cafeId:
                        type: string
                        example: "1"
        '400':
          description: 존재하지 않는 북마크 또는 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/points/transactions:
    get:
      summary: 포인트 거래 내역 조회
      description: 인증된 사용자의 포인트 적립/사용/환불 내역을 최신순으로 조회
      tags:
        - Point
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 포인트 거래 내역 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: array
                    items:
                      $ref: "#/components/schemas/PointTransaction"
        "401":
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/cafes/{cafeId}:
    get:
      summary: 카페 상세 정보 조회
      description: 카페 ID를 기반으로 상세 정보, 메뉴, 사진, 쿠폰, 스탬프북, 즐겨찾기 여부를 조회합니다.
      tags:
        - Cafe
      parameters:
        - in: path
          name: cafeId
          required: true          
          schema:
           type: integer
          description: 조회할 카페의 ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 성공적으로 카페 정보를 반환함
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      cafe:
                        type: object
                        properties:
                          id: { type: integer, example: 1 }
                          name: { type: string, example: 로스터리 카페 }
                          address: { type: string, example: 서울시 강남구 테헤란로 123 }
                          businessHours: { type: string, example: 평일 07:00-22:00, 주말 08:00-23:00 }
                          phone: { type: string, example: 02-1234-5678 }
                          websiteUrl: { type: string, format: uri, example: https://roastery-cafe.com }
                          description: { type: string }
                          storeFilters:
                            type: object
                            additionalProperties: { type: boolean }
                          takeOutFilters:
                            type: object
                            additionalProperties: { type: boolean }
                          menuFilters:
                            type: object
                            additionalProperties: { type: boolean }
                          keywords:
                            type: array
                            items: { type: string }
                      photos:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer }
                            url: { type: string, format: uri }
                            displayOrder: { type: integer }
                      menu:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer }
                            name: { type: string }
                            price: { type: integer }
                            description: { type: string }
                            imgUrl: { type: string, format: uri }
                            isSoldOut: { type: boolean }
                      coupons:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer }
                            name: { type: string }
                            validDays: { type: integer }
                            discountType: { type: string, enum: [fixed, percentage] }
                            discountValue: { type: number }
                            applicableMenu: { type: "null" }
                            expiredAt: { type: string, format: date-time }
                      stampBook:
                        type: object
                        properties:
                          id: { type: integer }
                          currentCount: { type: integer }
                          goalCount: { type: integer }
                          expiresAt: { type: string, format: date-time }
                          stampBookId: { type: integer }
                      bookmark:
                        type: object
                        properties:
                          isBookmarked: { type: boolean }
        '401':
          description: 인증 실패 (토큰 누락 또는 만료)
        '404':
          description: 존재하지 않는 카페

  /api/v1/cafe/{cafeId}/review:
    get:
      summary: 카페 리뷰 목록 조회 (페이징 지원)
      description: 카페 ID를 기반으로 리뷰를 커서 기반 페이징 방식으로 조회합니다.
      tags:
        - Cafe
      parameters:
        - in: path
          name: cafeId
          required: true
          schema:
            type: integer
          description: 리뷰를 조회할 카페 ID
        - in: query
          name: cursor
          required: false
          schema:
            type: integer
          description: 다음 페이지 조회를 위한 커서 (이전 응답의 nextCursor 값)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 성공적으로 리뷰를 반환함
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      reviews:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer, example: 1 }
                            title: { type: string, example: "로스터리 커피 맛집!" }
                            content: { type: string, example: "원두를 직접 로스팅해서 향이 정말 좋아요..." }
                            nickname: { type: string, example: "커피러버" }
                            createdAt: { type: string, format: date-time, example: "2025-07-19T10:30:00.000Z" }
                            images:
                              type: array
                              items:
                                type: string
                                format: uri
                      nextCursor:
                        type: integer
                        nullable: true
                        example: 10
                      hasNextPage:
                        type: boolean
                        example: true
        '401':
          description: 인증 실패 (토큰 없음/만료)
        '404':
          description: 해당 카페 또는 리뷰 없음
  
  /api/v1/coupon:
    post:
      summary: 쿠폰 발급
      description: 사용자가 쿠폰 템플릿을 기반으로 프로모션 쿠폰을 발급받습니다.
      tags:
        - Cafe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - validDays
              properties:
                id:
                  type: integer
                  description: 발급할 쿠폰 템플릿의 ID
                  example: 1
                validDays:
                  type: integer
                  description: 쿠폰의 유효 기간(일 단위)
                  example: 60
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 쿠폰 발급 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      id: { type: integer, example: 14 }
                      expiredAt: { type: string, format: date-time, example: "2025-09-22T04:46:43.364Z" }
                      acquisitionType: { type: string, example: promotion }
                      couponTemplateId: { type: integer, example: 1 }
                      couponTemplate:
                        type: object
                        properties:
                          id: { type: integer, example: 1 }
                          name: { type: string, example: "시그니처 아메리카노 무료" }
                          validDays: { type: integer, example: 30 }
                          discountType: { type: string, enum: [fixed, percentage], example: fixed }
                          discountValue: { type: number, example: 4500 }
                          applicableMenu: { type: "null" }
                          expiredAt: { type: string, format: date-time, example: "2025-12-31T23:59:59.000Z" }
        '409':
          description: 이미 발급받은 쿠폰 (중복 발급 방지)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: string
                    example: C002
                  reason:
                    type: string
                    example: 이미 발급받은 쿠폰입니다. 쿠폰 템플릿 ID: 1, 사용자 ID: 1
                  data:
                    type: object
                    properties:
                      couponTemplateId: { type: integer, example: 1 }
                      userId: { type: integer, example: 1 }
        '401':
          description: 인증 실패 (JWT 누락 또는 유효하지 않음)  

  /api/v1/bookmark:
    post:
      summary: 카페 북마크 생성
      description: 사용자가 특정 카페를 북마크합니다. 이미 북마크된 카페는 중복 저장되지 않습니다.
      tags:
        - Cafe
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  description: 북마크할 카페의 ID
                  example: 1
      responses:
        '200':
          description: 북마크 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                    example: SUCCESS
                  error:
                    type: "null"
                    example: null
                  success:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: 생성된 북마크 ID
                        example: 5
        '409':
          description: 이미 북마크한 카페
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: string
                    example: BM001
                  reason:
                    type: string
                    example: 이미 북마크한 카페입니다.
                  data:
                    type: "null"
                    example: null
        '401':
          description: 인증 실패 (JWT 누락 또는 유효하지 않음)

                  success:
                    $ref: '#/components/schemas/ReviewListResponse'
  /api/v1/challenges:
    get:
      summary: 챌린지 목록 조회
      description: 현재 유효한 챌린지 목록을 조회합니다. (종료일 오름차순 정렬)
      tags: [Challenge]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                  error:
                    type: string
                    nullable: true
                  success:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                        description:
                          type: string
                        thumbnailUrl:
                          type: string
                        startDate:
                          type: string
                          format: date
                        endDate:
                          type: string
                          format: date
                        isParticipated:
                          type: boolean

  /api/v1/challenges/{challengeId}:
    get:
      summary: 챌린지 상세 조회
      description: 챌린지 ID로 상세 정보를 조회합니다.
      tags: [Challenge]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: challengeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType:
                    type: string
                  error:
                    type: string
                    nullable: true
                  success:
                    type: object
                    properties:
                      id: { type: integer }
                      title: { type: string }
                      description: { type: string }
                      thumbnailUrl: { type: string }
                      startDate: { type: string, format: date }
                      endDate: { type: string, format: date }
                      goalDescription: { type: string }
                      goalCount: { type: integer }
                      rewardPoint: { type: integer }
                      isParticipated: { type: boolean }
                      availableCafes:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer }
                            name: { type: string }
                            address: { type: string }
                            region1DepthName: { type: string }
                            region2DepthName: { type: string }
                            region3DepthName: { type: string }

  /api/v1/challenges/{challengeId}/join:
    post:
      summary: 챌린지 참여
      description: 해당 챌린지에 로그인 유저가 참여합니다.
      tags: [Challenge]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: challengeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType: { type: string }
                  error: { type: string, nullable: true }
                  success:
                    type: object
                    properties:
                      message: { type: string }

  /api/v1/challenges/{challengeId}/cafes:
    get:
      summary: 참여 가능 매장 조회
      description: 특정 챌린지에 참여 가능한 카페 목록을 반환합니다.
      tags: [Challenge]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: challengeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType: { type: string }
                  error: { type: string, nullable: true }
                  success:
                    type: array
                    items:
                      type: object
                      properties:
                        cafeId: { type: integer }
                        name: { type: string }
                        address: { type: string }
                        region: { type: string }
                        distance: { type: number }

  /api/v1/users/me/challenges:
    get:
      summary: 나의 챌린지 목록 조회
      description: 로그인 유저가 현재 참여 중인 챌린지 목록을 조회합니다.
      tags: [Challenge]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType: { type: string }
                  error: { type: string, nullable: true }
                  success:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        title: { type: string }
                        thumbnailUrl: { type: string }
                        tag: { type: string, nullable: true }
                        startDate: { type: string, format: date }
                        endDate: { type: string, format: date }

  /api/v1/challenges/{challengeId}/complete:
    post:
      summary: 챌린지 완료 처리
      description: 챌린지를 완료 처리하고 쿠폰을 발급합니다.
      tags: [Challenge]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: challengeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultType: { type: string }
                  error: { type: string, nullable: true }
                  success:
                    type: object
                    properties:
                      message: { type: string }
                      couponId: { type: integer, nullable: true }
  /api/v1/users/me/stampbooks:
    get:
      summary: 전체 스탬프북 조회
      description: 로그인한 사용자의 전체 스탬프북을 정렬 기준에 따라 조회
      tags:
        - Stamp
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [mostStamped, shortestDeadline]
          description: 정렬 기준 (적립 많은 순 or 기한 짧은 순). 기본값: 생성일 내림차순
      responses:
        '200':
          description: 스탬프북 리스트 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StampBookListResponse'

  /api/v1/stampbooks/{stampBookId}:
    get:
      summary: 스탬프북 상세 조회
      description: 특정 스탬프북의 상세 정보를 조회
      tags:
        - Stamp
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: stampBookId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 스탬프북 상세 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StampBookDetail'

  /api/v1/stampbooks/{stampBookId}/stamps:
    post:
      summary: 도장 적립
      description: 스탬프북에 도장 1개 적립 (QR or 수동 방식)
      tags:
        - Stamp
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: stampBookId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cafeId:
                  type: integer
                method:
                  type: string
                  enum: [QR, MANUAL]
      responses:
        '200':
          description: 도장 적립 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  stampCount:
                    type: integer
                  isStampbookCompleted:
                    type: boolean

  /api/v1/stampbooks/{stampBookId}/convert:
    post:
      summary: 스탬프 → 포인트 환전
      description: 완료된 스탬프북을 포인트로 환전
      tags:
        - Stamp
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: stampBookId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 환전 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  stampCount:
                    type: integer
                  pointAmount:
                    type: integer

    delete:
      summary: 환전 취소
      description: 환전 후 3일 이내 환전 취소
      tags:
        - Stamp
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: stampBookId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 환전 취소 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  refundPoint:
                    type: integer

  /api/v1/stampbooks/{stampBookId}/extend:
    patch:
      summary: 스탬프북 기간 연장
      description: 진행 중인 스탬프북의 만료일을 14일 연장
      tags:
        - Stamp
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: stampBookId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 연장 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  newExpiresAt:
                    type: string
                    format: date-time

  /api/v1/users/me/stampbooks/expiring:
    get:
      summary: 소멸 임박 스탬프북 조회
      description: 7일 이내 만료 예정인 active 스탬프북 목록 조회
      tags:
        - Stamp
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StampBookExpiring'
  
  /api/v1/notification/{notificationId}:
    get:
      tags:
        - Notifications
      summary: 알림 상세 조회
      description: 알림 ID를 기반으로 상세 정보를 조회합니다. 읽지 않은 알림이라면 읽음 처리됩니다.
      security:
        - bearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          description: 조회할 알림 ID
          schema:
            type: integer
      responses:
        '200':
          description: 알림 상세 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 알림 상세 조회 성공
                  data:
                    type: object
                    properties:
                      notificationId:
                        type: integer
                        example: 12
                      title:
                        type: string
                        example: 오늘의 챌린지가 시작됐어요!
                      type:
                        type: string
                        enum: [system, challenge, stamp, review, coupon]
                      createdAt:
                        type: string
                        format: date-time
                      cafe:
                        type: object
                        nullable: true
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: 루피커피
                      detail:
                        oneOf:
                          - $ref: '#/components/schemas/SystemNotificationDetail'
                          - $ref: '#/components/schemas/ChallengeNotificationDetail'
                          - $ref: '#/components/schemas/StampNotificationDetail'
                          - $ref: '#/components/schemas/ReviewNotificationDetail'
                          - $ref: '#/components/schemas/CouponNotificationDetail'
        '404':
          description: 알림이 존재하지 않음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/stampbooks/{cafeId}/coupon:
    post:
      tags:
        - StampBooks
      summary: 스탬프 목표 달성 시 리워드 쿠폰 발급
      description: 스탬프북의 목표를 달성한 경우, 사용자에게 리워드 쿠폰을 발급합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: cafeId
          in: path
          required: true
          description: 쿠폰을 발급받을 카페 ID
          schema:
            type: integer
      responses:
        '200':
          description: 리워드 쿠폰 발급 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 리워드 쿠폰 발급 성공
                  coupon:
                    $ref: '#/components/schemas/UserCoupon'
        '400':
          description: 스탬프북이 조건을 만족하지 않음 또는 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증되지 않은 사용자
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 스탬프북 또는 카페를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/cafe/{cafeId}/review:
  post:
    tags:
      - Review
    summary: 리뷰 작성
    description: 제목 20자 이상, 본문 500자 이상, 이미지 최대 5장까지 첨부 가능합니다.
    security:
      - bearerAuth: []
    parameters:
      - name: cafeId
        in: path
        required: true
        schema:
          type: integer
        description: 리뷰를 작성할 카페 ID
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - title
              - content
            properties:
              title:
                type: string
                example: "카페 분위기가 너무 좋아요!"
              content:
                type: string
                example: >
                  커피 맛도 좋고 조용해서 공부하기 좋았어요. 다음에 또 방문할 예정입니다.
              images:
                type: array
                items:
                  type: string
                  format: binary
                description: 첨부 이미지 파일 (최대 5장)
    responses:
      '201':
        description: 리뷰 작성 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 리뷰 작성 성공
                review:
                  $ref: '#/components/schemas/Review'
      '400':
        description: 잘못된 요청 (제목/본문 미입력, 유효성 실패 등)
        content:
          application/json:
            examples:
              제목 짧음:
                value: { errorCode: "R001", reason: "제목은 최소 20자 이상이어야 합니다." }
              본문 짧음:
                value: { errorCode: "R002", reason: "본문은 최소 500자 이상이어야 합니다." }
              필드 누락:
                value: { errorCode: "R005", reason: "제목과 본문을 모두 입력해주세요." }
              이미지 타입 오류:
                value: { errorCode: "R006", reason: "이미지 파일 형식만 업로드할 수 있습니다. (받은 타입: text/plain)" }
              이미지 수량 초과:
                value: { errorCode: "R007", reason: "이미지는 최대 5개까지만 업로드할 수 있습니다. (받은 수량: 6개)" }
      '403':
        description: 유효한 스탬프가 없음
        content:
          application/json:
            example:
              value: { errorCode: "R008", reason: "스탬프 적립을 시작하고 리뷰를 작성해보세요!" }
      '500':
        description: 서버 오류

  /api/v1/reviews/{reviewId}:
  patch:
    tags:
      - Review
    summary: 리뷰 수정
    description: 본인의 리뷰만 수정할 수 있습니다.
    security:
      - bearerAuth: []
    parameters:
      - name: reviewId
        in: path
        required: true
        schema:
          type: integer
        description: 수정할 리뷰 ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - title
              - content
            properties:
              title:
                type: string
                example: "업데이트된 제목입니다."
              content:
                type: string
                example: "내용도 새롭게 작성했습니다."
    responses:
      '200':
        description: 리뷰 수정 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 리뷰 수정 성공
                review:
                  $ref: '#/components/schemas/Review'
      '403':
        description: 권한 없음
        content:
          application/json:
            example:
              value: { errorCode: "R004", reason: "본인의 리뷰만 수정/삭제할 수 있습니다." }
      '404':
        description: 리뷰 없음
        content:
          application/json:
            example:
              value: { errorCode: "R003", reason: "ID 123에 해당하는 리뷰가 존재하지 않습니다." }
      '400':
        description: 필수 필드 누락
        content:
          application/json:
            example:
              value: { errorCode: "R005", reason: "제목과 본문을 모두 입력해주세요." }
      '500':
        description: 서버 오류

  delete:
    tags:
      - Review
    summary: 리뷰 삭제
    description: 본인이 작성한 리뷰만 삭제할 수 있습니다.
    security:
      - bearerAuth: []
    parameters:
      - name: reviewId
        in: path
        required: true
        schema:
          type: integer
        description: 삭제할 리뷰 ID
    responses:
      '200':
        description: 리뷰 삭제 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 리뷰 삭제 성공!
      '403':
        description: 권한 없음
        content:
          application/json:
            example:
              value: { errorCode: "R004", reason: "본인의 리뷰만 수정/삭제할 수 있습니다." }
      '404':
        description: 리뷰 없음
        content:
          application/json:
            example:
              value: { errorCode: "R003", reason: "ID 123에 해당하는 리뷰가 존재하지 않습니다." }
      '500':
        description: 서버 오류

  /api/v1/users/me/reviews:
  get:
    tags:
      - Review
    summary: 내가 작성한 리뷰 목록 조회
    description: 로그인한 사용자가 작성한 리뷰 목록을 페이지네이션 형식으로 조회합니다.
    security:
      - bearerAuth: []
    parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          default: 1
        description: 조회할 페이지 번호
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 10
        description: 페이지당 항목 수
    responses:
      '200':
        description: 내가 쓴 리뷰 목록 조회 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 내가 쓴 리뷰 목록 조회 성공
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserReviewSummary'
                pagination:
                  type: object
                  properties:
                    page:
                      type: integer
                      example: 1
                    limit:
                      type: integer
                      example: 10
                    total:
                      type: integer
                      example: 27
      '401':
        description: 인증 실패
        content:
          application/json:
            example:
              value: { errorCode: "AUTH001", reason: "JWT 토큰이 유효하지 않습니다." }
      '500':
        description: 서버 오류

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: string
          example: "2"
        email:
          type: string
          example: test@example.com
        phoneNumber:
          type: string
          example: "01012345678"
        nickname:
          type: string
          example: 테스터
        role:
          type: string
          enum: [CUSTOMER, OWNER]
          example: CUSTOMER
        status:
          type: string
          enum: [active, inactive]
          example: active
        allowKakaoAlert:
          type: boolean
          example: false
        profileImageUrl:
          type: string
          nullable: true
          example: null
        fcmToken:
          type: string
          nullable: true
          example: null
        createdAt:
          type: string
          format: date-time
          example: "2025-07-01T10:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-07-17T16:30:00.000Z"
        inactivedAt:
          type: string
          format: date-time
          nullable: true
          example: null
  
    LoginUserProfile:
      type: object
      properties:
        id:
          type: string
          example: "1"
        email:
          type: string
          example: test@example.com
        nickname:
          type: string
          example: 테스터
        currentRole:
          type: string
          enum: [CUSTOMER, OWNER]
          example: CUSTOMER


    UserAgreementRequest:
      type: object
      required:
        - termsAgreed
        - privacyPolicyAgreed
        - marketingAgreed
        - locationPermission
      properties:
        termsAgreed:
          type: boolean
          example: true
        privacyPolicyAgreed:
          type: boolean
          example: true
        marketingAgreed:
          type: boolean
          example: false
        locationPermission:
          type: boolean
          example: true

    UserKeywordPreferenceRequest:
      type: object
      required:
        - preferredKeywords
      properties:
        preferredKeywords:
          type: array
          items:
            type: string
          example:
            - 노트북
            - 1인석
            - 디카페인

    UserAgreementResponse:
      type: object
      properties:
        id:
          type: string
          example: "1"
        userId:
          type: string
          example: "1"
        termsAgreed:
          type: boolean
          example: true
        privacyPolicyAgreed:
          type: boolean
          example: true
        marketingAgreed:
          type: boolean
          example: false
        locationPermission:
          type: boolean
          example: true
        agreedAt:
          type: string
          format: date-time
          example: "2025-07-23T04:40:50.464Z"

    UserPreferredAreaRequest:
      type: object
      required:
        - preferredArea
      properties:
        preferredArea:
          type: string
          example: 서울 마포구 신촌동

    KakaoAlertSettingRequest:
      type: object
      required:
        - allowKakaoAlert
      properties:
        allowKakaoAlert:
          type: boolean
          example: true

    BookmarkedCafe:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: 테스트카페
        address:
          type: string
          example: 서울시 마포구 양화로 123
        region:
          type: string
          example: 마포구
        latitude:
          type: number
          example: 37.5509
        longitude:
          type: number
          example: 126.9143
        description:
          type: string
          nullable: true
          example: null
        keywords:
          type: array
          nullable: true
          items:
            type: string
          example: null
        status:
          type: string
          enum: [active, inactive, deleted]
          example: active
        createdAt:
          type: string
          format: date-time
          example: "2025-07-19T09:21:39.933Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-07-19T09:20:09.040Z"
 
    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
        reason:
          type: string
        data:
          type: object
        example:
          errorCode: BM001
          reason: 이미 북마크한 카페입니다.
          data: null

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - nickname
        - phoneNumber
        - role
        - allowKakaoAlert
        - agreements
      properties:
        email:
          type: string
          format: email
          default: test@example.com
        password:
          type: string
          format: password
          default: securepassword123
        nickname:
          type: string
          default: 테스터
        phoneNumber:
          type: string
          default: "01012345678"
        role:
          type: string
          enum: [CUSTOMER, OWNER]
          default: CUSTOMER
        allowKakaoAlert:
          type: boolean
          default: true
        agreements:
          type: object
          required:
            - termsAgreed
            - privacyPolicyAgreed
            - marketingAgreed
            - locationPermission
          properties:
            termsAgreed:
              type: boolean
              default: true
            privacyPolicyAgreed:
              type: boolean
              default: true
            marketingAgreed:
              type: boolean
              default: false
            locationPermission:
              type: boolean
              default: true

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          format: password
          example: securepassword123
        role:
          type: string
          enum: [CUSTOMER, OWNER]
          example: CUSTOMER

    FcmTokenRequest:
      type: object
      required:
        - fcmToken
      properties:
        fcmToken:
          type: string
          example: abc123xyz456

    PhoneVerificationRequest:
      type: object
      required:
        - idToken
      properties:
        idToken:
          type: string
          description: Firebase에서 발급된 ID 토큰
          example: FIREBASE_ID_TOKEN
    
    NicknameUpdateRequest:
      type: object
      required:
        - nickname
      properties:
        nickname:
          type: string
          example: 새로운닉네임

    BookmarkRequest:
      type: object
      required:
        - cafeId
      properties:
        cafeId:
          type: integer
          example: 1

    ChallengeListItem:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        thumbnailUrl:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        isParticipated:
          type: boolean

    ChallengeListResponse:
      type: array
      items:
        $ref: '#/components/schemas/ChallengeListItem'

    ChallengeAvailableCafe:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        region1DepthName:
          type: string
        region2DepthName:
          type: string
        region3DepthName:
          type: string

    ChallengeDetail:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        thumbnailUrl:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        goalDescription:
          type: string
        goalCount:
          type: integer
        rewardPoint:
          type: integer
        isParticipated:
          type: boolean
        availableCafes:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeAvailableCafe'

    MyChallengeListItem:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        thumbnailUrl:
          type: string
        tag:
          type: string
          nullable: true
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date

    MyChallengeListResponse:
      type: array
      items:
        $ref: '#/components/schemas/MyChallengeListItem'

    StampBookListItem:
      type: object
      properties:
        id:
          type: integer
        cafe:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            address:
              type: string
        currentCount:
          type: integer
        goalCount:
          type: integer
        status:
          type: string
        expiredAt:
          type: string
          format: date-time

    StampBookListResponse:
      type: array
      items:
        $ref: '#/components/schemas/StampBookListItem'

    Stamp:
      type: object
      properties:
        id:
          type: integer
        stampedAt:
          type: string
          format: date-time
        stampImageUrl:
          type: string
        source:
          type: string
        note:
          type: string
        latitude:
          type: number
        longitude:
          type: number

    StampBookDetail:
      type: object
      properties:
        id:
          type: integer
        cafe:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            address:
              type: string
        goalCount:
          type: integer
        currentCount:
          type: integer
        status:
          type: string
        isCompleted:
          type: boolean
        rewardDetail:
          type: string
        startedAt:
          type: string
          format: date-time
        lastVisitedAt:
          type: string
          format: date-time
          nullable: true
        expiresAt:
          type: string
          format: date-time
        extendedAt:
          type: string
          format: date-time
          nullable: true
        expiredAt:
          type: string
          format: date-time
          nullable: true
        completedAt:
          type: string
          format: date-time
          nullable: true
        convertedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        stamps:
          type: array
          items:
            $ref: '#/components/schemas/Stamp'

    StampBookExpiring:
      type: object
      properties:
        id:
          type: integer
        cafe:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            address:
              type: string
        expiresAt:
          type: string
          format: date-time
        status:
          type: string

    StampConversionResult:
      type: object
      properties:
        message:
          type: string
        stampCount:
          type: integer
        pointAmount:
          type: integer

    StampCancelConversionResult:
      type: object
      properties:
        message:
          type: string
        refundPoint:
          type: integer

    StampBookExtendResult:
      type: object
      properties:
        message:
          type: string
        newExpiresAt:
          type: string
          format: date-time

    SystemNotificationDetail:
      type: object
      properties:
        title:
          type: string
          example: 시스템 알림 제목
        content:
          type: string
          example: 시스템 알림 본문

    ChallengeNotificationDetail:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          title:
            type: string
          description:
            type: string
          thumbnailUrl:
            type: string
          startDate:
            type: string
            format: date
          endDate:
            type: string
            format: date
          isActive:
            type: boolean

    StampNotificationDetail:
      type: object
      properties:
        id:
          type: integer
        currentCount:
          type: integer
        goalCount:
          type: integer
        rewardDetail:
          type: string
        status:
          type: string
        isCompleted:
          type: boolean
        isConverted:
          type: boolean
        expiresAt:
          type: string
          format: date-time
        lastVisitedAt:
          type: string
          format: date-time
          nullable: true

    ReviewNotificationDetail:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string

    CouponNotificationDetail:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          validDays:
            type: integer
          discountType:
            type: string
          discountValue:
            type: integer
          applicableMenuId:
            type: integer
            nullable: true
          expiredAt:
            type: string
            format: date-time

    UserCoupon:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        couponTemplateId:
          type: integer
        acquisitionType:
          type: string
          enum: [stamp, promotion]
        status:
          type: string
          enum: [active, used, expired]
        issuedAt:
          type: string
          format: date-time
        expiredAt:
          type: string
          format: date-time
        couponTemplate:
          type: object
          properties:
            id:
              type: integer
            cafeId:
              type: integer
            name:
              type: string
            discountType:
              type: string
              enum: [AMOUNT, PERCENT]
            discountValue:
              type: number
            validDays:
              type: integer
            isActive:
              type: boolean
            expiredAt:
              type: string
              format: date-time

  securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT

tags:
  - name: Users
    description: 사용자 정보 및 설정 관련 API